export const ensureAuthenticated = async (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "Unauthorized: No token provided" });
  }

  const token = authHeader.split(" ")[1];

  try {
    // Verify the token. Replace 'your_secret_key' with your actual secret key.
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Attach user data to the request object
    req.user = decoded.user;

    // Assuming the organization ID is included in the token payload
    const organizationId = decoded.organizationId; // or however the organization ID is stored

    // Fetch organization data from the database
    const organization = await Organization.findByPk(organizationId);

    if (!organization) {
      return res.status(404).json({ message: "Organization not found" });
    }

    // Attach organization data to the request object
    req.organization = organization;

    next();
  } catch (error) {
    console.log(error);
    return res.status(401).json({ message: "Unauthorized: Invalid token" });
  }
};
















login

export const LoginUser = async (req, res) => {
  const { username, password } = req.body;
  try {
    console.log(req.body);
    const user = await User.findOne({ where: { username } });
    console.log(user);

    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: "Invalid credentials" });
    }

    // if (password == user.password) {
    //   return res.status(400).json({ error: "Invalid credentials" });
    // }
    const payload = {
      user_id: user.user_id,
      role: user.role,
      Organisation: user.organisation_id,
    };
    const token = jwt.sign(payload, "your_jwt_secret", { expiresIn: "1h" });
    res.status(200).json({ token });
  } catch (err) {
    res.status(500).json({ error: "Login failed" });
  }
};
